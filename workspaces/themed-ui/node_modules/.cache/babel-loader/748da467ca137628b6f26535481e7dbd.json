{"ast":null,"code":"var _jsxFileName = \"/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/themed-ui/src/Button/Button.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport { margin } from 'styled-system';\nimport { getMinLineHeight } from '../theme-utils';\nimport { tagPropType } from '../prop-types';\nimport styles from './Button.module.css';\nexport const getButttonStyle = ({\n  outline = false,\n  size = 'md',\n  theme,\n  variant: variantKey = 'default'\n}) => {\n  const {\n    buttons,\n    colors,\n    shared,\n    space\n  } = theme;\n  const {\n    borderWidth,\n    sizes,\n    variants\n  } = buttons;\n  let variant = { ...variants[variantKey]\n  };\n\n  const getVariantColors = ({\n    contrast,\n    mode,\n    outline,\n    styles\n  }) => {\n    var _backgroundColor$3, _color$, _backgroundColor$4;\n\n    let backgroundColorKey = styles.keyColor || 'default';\n    let backgroundColor = colors[backgroundColorKey] || backgroundColorKey;\n    let colorKey = styles.color || (mode === 'dark' ? 'black' : 'white');\n    let color = colors[colorKey] || colorKey;\n\n    if (outline) {\n      var _backgroundColor$, _backgroundColor$2;\n\n      return {\n        color: (_backgroundColor$ = backgroundColor === null || backgroundColor === void 0 ? void 0 : backgroundColor[`${mode}-${contrast}`]) !== null && _backgroundColor$ !== void 0 ? _backgroundColor$ : backgroundColor,\n        backgroundColor: 'transparent',\n        borderColor: (_backgroundColor$2 = backgroundColor === null || backgroundColor === void 0 ? void 0 : backgroundColor[`${mode}-${contrast}`]) !== null && _backgroundColor$2 !== void 0 ? _backgroundColor$2 : backgroundColor\n      };\n    }\n\n    return {\n      backgroundColor: (_backgroundColor$3 = backgroundColor === null || backgroundColor === void 0 ? void 0 : backgroundColor[`${mode}-${contrast}`]) !== null && _backgroundColor$3 !== void 0 ? _backgroundColor$3 : backgroundColor,\n      color: (_color$ = color === null || color === void 0 ? void 0 : color[`${mode}-bg`]) !== null && _color$ !== void 0 ? _color$ : colorKey,\n      borderColor: (_backgroundColor$4 = backgroundColor === null || backgroundColor === void 0 ? void 0 : backgroundColor[`${mode}-${contrast}`]) !== null && _backgroundColor$4 !== void 0 ? _backgroundColor$4 : backgroundColor\n    };\n  };\n\n  let {\n    fontSize,\n    paddingH,\n    paddingV\n  } = sizes[size];\n  const {\n    ratio: lineHeightRatio,\n    px: lineHeightPx\n  } = getMinLineHeight({\n    size: fontSize,\n    space\n  });\n  const lightModeStyle = {\n    'default': { ...getVariantColors({\n        contrast: '1',\n        mode: 'light',\n        outline,\n        styles: variant['default']\n      })\n    },\n    ':hover': { ...getVariantColors({\n        contrast: '2',\n        mode: 'light',\n        outline,\n        styles: variant[':hover']\n      })\n    },\n    ':focus': { ...getVariantColors({\n        contrast: '2',\n        mode: 'light',\n        outline,\n        styles: variant[':focus']\n      })\n    },\n    ':active': { ...getVariantColors({\n        contrast: '2',\n        mode: 'light',\n        outline,\n        styles: variant[':active']\n      })\n    },\n    ':disabled': {\n      color: getVariantColors({\n        contrast: '3',\n        mode: 'light',\n        outline,\n        styles: variant[':disabled']\n      })\n    }\n  };\n  const darkModeStyle = {\n    'default': { ...getVariantColors({\n        contrast: '1',\n        mode: 'dark',\n        outline,\n        styles: variant['default']\n      })\n    },\n    ':hover': { ...getVariantColors({\n        contrast: '2',\n        mode: 'dark',\n        outline,\n        styles: variant[':hover']\n      })\n    },\n    ':focus': { ...getVariantColors({\n        contrast: '2',\n        mode: 'dark',\n        outline,\n        styles: variant[':focus']\n      })\n    },\n    ':active': { ...getVariantColors({\n        contrast: '2',\n        mode: 'dark',\n        outline,\n        styles: variant[':active']\n      })\n    },\n    ':disabled': { ...getVariantColors({\n        contrast: '3',\n        mode: 'dark',\n        outline,\n        styles: variant[':disabled']\n      })\n    }\n  };\n  const modeStyles = shared.mode === 'dark' && darkModeStyle || lightModeStyle;\n  return {\n    borderWidth,\n    borderStyle: 'solid',\n    borderRadius: theme.shared.roundness * (lineHeightPx / 2 + paddingV) / 10,\n    paddingBottom: paddingV - borderWidth,\n    paddingLeft: paddingH - borderWidth,\n    paddingRight: paddingH - borderWidth,\n    paddingTop: paddingV - borderWidth,\n    fontSize: fontSize,\n    lineHeight: lineHeightRatio,\n    transition: 'background-color 0.2s linear, border-color 0.2s linear, color 0.2s linear',\n    ...modeStyles.default,\n    ':hover': { ...modeStyles[':hover']\n    },\n    ':focus': {\n      outlineStyle: 'none',\n      outlineColor: modeStyles.default.borderColor,\n      boxShadow: `0 0 0 1px ${modeStyles.default.borderColor}, 0 0 4px 0px ${modeStyles[':focus'].borderColor}`,\n      ...modeStyles[':focus']\n    },\n    ':active': { ...modeStyles[':active']\n    },\n    ':disabled': { ...modeStyles[':disabled']\n    },\n    '@media (prefers-color-scheme: light)': !shared.mode && { ...lightModeStyle\n    },\n    '@media (prefers-color-scheme: dark)': !shared.mode && { ...darkModeStyle\n    }\n  };\n};\n\nconst Button = ({\n  className,\n  outline,\n  tag: Tag,\n  ...passedProps\n}) => /*#__PURE__*/React.createElement(Tag, Object.assign({}, passedProps, {\n  className: classNames(className, styles.Button),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 3\n  }\n}));\n\nButton.propTypes = {\n  className: PropTypes.string,\n  tag: tagPropType\n};\nButton.defaultProps = {\n  className: '',\n  tag: 'button'\n};\nconst StyledButton = styled(Button)(props => ({ ...getButttonStyle(props)\n}), margin);\nexport default StyledButton;","map":{"version":3,"sources":["/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/themed-ui/src/Button/Button.js"],"names":["React","PropTypes","classNames","styled","margin","getMinLineHeight","tagPropType","styles","getButttonStyle","outline","size","theme","variant","variantKey","buttons","colors","shared","space","borderWidth","sizes","variants","getVariantColors","contrast","mode","backgroundColorKey","keyColor","backgroundColor","colorKey","color","borderColor","fontSize","paddingH","paddingV","ratio","lineHeightRatio","px","lineHeightPx","lightModeStyle","darkModeStyle","modeStyles","borderStyle","borderRadius","roundness","paddingBottom","paddingLeft","paddingRight","paddingTop","lineHeight","transition","default","outlineStyle","outlineColor","boxShadow","Button","className","tag","Tag","passedProps","propTypes","string","defaultProps","StyledButton","props"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport { margin } from 'styled-system'\nimport { getMinLineHeight } from '../theme-utils';\nimport { tagPropType } from '../prop-types';\nimport styles from './Button.module.css';\n\nexport const getButttonStyle = ({\n  outline = false,\n  size = 'md',\n  theme,\n  variant: variantKey = 'default',\n}) => {\n  const {\n    buttons,\n    colors,\n    shared,\n    space,\n  } = theme;\n\n  const {\n    borderWidth,\n    sizes,\n    variants,\n  } = buttons;\n\n  let variant = { ...variants[variantKey] };\n\n  const getVariantColors = ({ contrast, mode, outline, styles }) => {\n    let backgroundColorKey = styles.keyColor || 'default';\n    let backgroundColor = colors[backgroundColorKey] || backgroundColorKey;\n    let colorKey = styles.color || (mode === 'dark' ? 'black' : 'white');\n    let color = colors[colorKey] || colorKey;\n\n    if (outline) {\n      return {\n        color: backgroundColor?.[`${mode}-${contrast}`] ?? backgroundColor,\n        backgroundColor: 'transparent',\n        borderColor: backgroundColor?.[`${mode}-${contrast}`] ?? backgroundColor,\n      };\n    }\n\n    return  {\n      backgroundColor: backgroundColor?.[`${mode}-${contrast}`] ?? backgroundColor,\n      color: color?.[`${mode}-bg`] ?? colorKey,\n      borderColor: backgroundColor?.[`${mode}-${contrast}`] ?? backgroundColor,\n    };\n  };\n\n  let {\n    fontSize,\n    paddingH,\n    paddingV,\n  } = sizes[size];\n\n  const {\n    ratio: lineHeightRatio,\n    px: lineHeightPx,\n  } = getMinLineHeight({\n    size: fontSize,\n    space,\n  });\n\n  const lightModeStyle = {\n    'default': {\n      ...getVariantColors({\n        contrast: '1',\n        mode: 'light',\n        outline,\n        styles: variant['default'],\n      }),\n    },\n    ':hover': {\n      ...getVariantColors({\n        contrast: '2',\n        mode: 'light',\n        outline,\n        styles: variant[':hover'],\n      }),\n    },\n    ':focus': {\n      ...getVariantColors({\n        contrast: '2',\n        mode: 'light',\n        outline,\n        styles: variant[':focus'],\n      }),\n    },\n    ':active': {\n      ...getVariantColors({\n        contrast: '2',\n        mode: 'light',\n        outline,\n        styles: variant[':active'],\n      }),\n    },\n    ':disabled': {\n      color: getVariantColors({\n        contrast: '3',\n        mode: 'light',\n        outline,\n        styles: variant[':disabled'],\n      }),\n    },\n  };\n\n  const darkModeStyle = {\n    'default': {\n      ...getVariantColors({\n        contrast: '1',\n        mode: 'dark',\n        outline,\n        styles: variant['default'],\n      }),\n    },\n    ':hover': {\n      ...getVariantColors({\n        contrast: '2',\n        mode: 'dark',\n        outline,\n        styles: variant[':hover'],\n      }),\n    },\n    ':focus': {\n      ...getVariantColors({\n        contrast: '2',\n        mode: 'dark',\n        outline,\n        styles: variant[':focus'],\n      }),\n    },\n    ':active': {\n      ...getVariantColors({\n        contrast: '2',\n        mode: 'dark',\n        outline,\n        styles: variant[':active'],\n      }),\n    },\n    ':disabled': {\n      ...getVariantColors({\n        contrast: '3',\n        mode: 'dark',\n        outline,\n        styles: variant[':disabled'],\n      }),\n    },\n  };\n\n  const modeStyles = (shared.mode === 'dark' && darkModeStyle) || lightModeStyle;\n\n  return ({\n    borderWidth,\n    borderStyle: 'solid',\n    borderRadius: theme.shared.roundness * (lineHeightPx / 2 + paddingV) / 10,\n    paddingBottom: paddingV - borderWidth,\n    paddingLeft: paddingH - borderWidth,\n    paddingRight: paddingH - borderWidth,\n    paddingTop: paddingV - borderWidth,\n    fontSize: fontSize,\n    lineHeight: lineHeightRatio,\n    transition: 'background-color 0.2s linear, border-color 0.2s linear, color 0.2s linear',\n    ...modeStyles.default,\n    ':hover': {\n      ...modeStyles[':hover'],\n    },\n    ':focus': {\n      outlineStyle: 'none',\n      outlineColor: modeStyles.default.borderColor,\n      boxShadow: `0 0 0 1px ${modeStyles.default.borderColor}, 0 0 4px 0px ${modeStyles[':focus'].borderColor}`,\n      ...modeStyles[':focus'],\n    },\n    ':active': {\n      ...modeStyles[':active'],\n    },\n    ':disabled': {\n      ...modeStyles[':disabled'],\n    },\n    '@media (prefers-color-scheme: light)': !shared.mode && {\n      ...lightModeStyle,\n    },\n    '@media (prefers-color-scheme: dark)': !shared.mode && {\n      ...darkModeStyle,\n    },\n  })\n};\n\nconst Button = ({\n  className,\n  outline,\n  tag: Tag,\n  ...passedProps\n}) => (\n  <Tag\n    {...passedProps}\n    className={classNames(className, styles.Button)}\n  />\n);\n\nButton.propTypes = {\n  className: PropTypes.string,\n  tag: tagPropType,\n};\n\nButton.defaultProps = {\n  className: '',\n  tag: 'button',\n};\n\nconst StyledButton = styled(Button)(\n  props => ({\n    ...getButttonStyle(props),\n  }),\n  margin,\n);\n\nexport default StyledButton;\n"]},"metadata":{},"sourceType":"module"}