{"ast":null,"code":"import { getHexFromHexOrName, setColorByContrastWithHsl } from './utils/colors';\nexport const getInheritedBaseColor = ({\n  attempt = 0,\n  baseColors,\n  maxAttempts: initMaxAttempts,\n  prevUnsafeColor,\n  resolveCssColors = true,\n  unsafeColor\n}) => {\n  let maxAttempts = initMaxAttempts;\n\n  if (initMaxAttempts === undefined) {\n    maxAttempts = Object.keys(baseColors).length;\n  }\n\n  if (attempt > maxAttempts) {\n    return unsafeColor;\n  }\n\n  if (!baseColors[unsafeColor]) {\n    return resolveCssColors ? unsafeColor : prevUnsafeColor;\n  }\n\n  return getInheritedBaseColor({\n    attempt: attempt + 1,\n    baseColors,\n    maxAttempts,\n    prevUnsafeColor: unsafeColor,\n    resolveCssColors,\n    unsafeColor: baseColors[unsafeColor]\n  });\n};\nexport const getColors = ({\n  baseColors\n}) => {\n  const bgStep = 1.1;\n  const contrastRatios = [7, 4.5, 3];\n  const colors = Object.entries(baseColors).reduce((result, [key, unsafeColor]) => {\n    let color = getInheritedBaseColor({\n      baseColors,\n      unsafeColor\n    });\n    color = getHexFromHexOrName(color);\n    const white = getHexFromHexOrName(baseColors.white);\n    const black = getHexFromHexOrName(baseColors.black);\n\n    if (['white', 'black'].indexOf(key) >= 0) {\n      return result;\n    } // Default is a special range from white to black,\n    // but with user configured options for white and black\n\n\n    if (key === 'default') {\n      color = black;\n    }\n\n    result[key] = {};\n    result[key].base = color;\n    result[key]['light-bg'] = setColorByContrastWithHsl({\n      hex: color,\n      baseHex: white,\n      contrastRatio: bgStep\n    });\n    contrastRatios.forEach((contrastRatio, i) => {\n      // Large text\n      result[key][`light-${i + 1}`] = setColorByContrastWithHsl({\n        hex: color,\n        baseHex: result[key]['light-bg'],\n        contrastRatio,\n        direction: 'desc'\n      });\n    });\n    result[key]['dark-bg'] = setColorByContrastWithHsl({\n      hex: color,\n      baseHex: black,\n      contrastRatio: bgStep\n    });\n    contrastRatios.forEach((contrastRatio, i) => {\n      // Large text\n      result[key][`dark-${i + 1}`] = setColorByContrastWithHsl({\n        hex: color,\n        baseHex: result[key]['dark-bg'],\n        contrastRatio: contrastRatio,\n        direction: 'asc'\n      });\n    });\n    return result;\n  }, {});\n  return colors;\n};\nexport const getButtons = ({\n  baseColors,\n  colors,\n  customButtons,\n  fonts,\n  space\n}) => {\n  const variants = Object.keys(baseColors).filter(key => !['black', 'white'].includes(key)).reduce((result, key) => {\n    return { ...result,\n      [key]: {\n        'default': {\n          keyColor: key\n        },\n        ':hover': {\n          keyColor: key\n        },\n        ':focus': {\n          keyColor: key\n        },\n        ':active': {\n          keyColor: key\n        },\n        ':disabled': {\n          keyColor: 'neutral'\n        }\n      }\n    };\n  }, {});\n  return {\n    borderWidth: 1,\n    roundness: 0.2,\n    shine: 1,\n    // Very shiny: glass, shiny: plastic, slightly shiny: paper, 0: flat\n    sizes: {\n      sm: {\n        fontSize: fonts.sizes.sm,\n        paddingH: space.sm,\n        paddingV: space.xs\n      },\n      md: {\n        fontSize: fonts.sizes.md,\n        paddingH: space.md,\n        paddingV: space.sm\n      },\n      lg: {\n        fontSize: fonts.sizes.lg,\n        paddingH: space.md,\n        paddingV: space.sm\n      }\n    },\n    variants\n  };\n};\nexport const getMinLineHeight = ({\n  size,\n  space\n}) => {\n  const idealSize = size * 1.4;\n  const floor = Math.floor(idealSize / space.xs) * space.xs;\n  const ceil = Math.ceil(idealSize / space.xs) * space.xs;\n  const px = Math.abs(idealSize - floor) <= Math.abs(idealSize - ceil) ? floor : ceil;\n  const ratio = px / size;\n  return {\n    px,\n    ratio\n  };\n};\nexport const getShared = ({\n  elevation = 1,\n  roundness = 3,\n  shine = 0\n}) => ({\n  elevation,\n  mode: undefined,\n  // 'light', 'dark', undefined\n  roundness,\n  shine\n});\nexport const getSizeLabelFromIndex = sizeIndex => {\n  const smSizeLabels = ['sm', 'xs'];\n  const lgSizeLabels = ['lg', 'xl'];\n  const baseSizeLabel = 'md';\n\n  if (sizeIndex < 0) {\n    if (-1 * sizeIndex <= smSizeLabels.length) {\n      return smSizeLabels[-1 * sizeIndex - 1];\n    }\n\n    return `${-1 * sizeIndex - 1}${smSizeLabels[smSizeLabels.length - 1]}`;\n  }\n\n  if (sizeIndex > 0) {\n    if (sizeIndex <= lgSizeLabels.length) {\n      return lgSizeLabels[sizeIndex - 1];\n    }\n\n    return `${sizeIndex - 1}${lgSizeLabels[lgSizeLabels.length - 1]}`;\n  }\n\n  return baseSizeLabel;\n};\nexport const getSizes = ({\n  count,\n  customSizes = {},\n  lgCount = 0,\n  mdSize = null,\n  smCount = 0\n}) => {\n  let offset;\n  let sizes = [{\n    label: 'md',\n    size: mdSize\n  }];\n\n  if (count) {\n    if (count < 1) {\n      throw new Error('Count must be at least 1');\n    }\n\n    offset = Math.floor(count / 2);\n    sizes = new Array(count).fill(null).map((size, i) => i - offset);\n  } else if (lgCount >= 0 && smCount >= 0) {\n    offset = smCount;\n    sizes = new Array(1 + lgCount + smCount).fill(null).map((size, i) => i - offset);\n  } else {\n    throw new Error('You must define `count` _or_ `lgCount`/`smCount`');\n  }\n\n  sizes = sizes.map(sizeIndex => {\n    let size = {\n      label: getSizeLabelFromIndex(sizeIndex),\n      size: mdSize * Math.pow(2, sizeIndex)\n    };\n    return size;\n  });\n  return { ...sizes.reduce((result, size) => ({ ...result,\n      [size.label]: size.size\n    }), {}),\n    ...customSizes\n  };\n};\nexport default {\n  getSizes\n};","map":{"version":3,"sources":["/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/themed-ui/src/theme-utils.mjs"],"names":["getHexFromHexOrName","setColorByContrastWithHsl","getInheritedBaseColor","attempt","baseColors","maxAttempts","initMaxAttempts","prevUnsafeColor","resolveCssColors","unsafeColor","undefined","Object","keys","length","getColors","bgStep","contrastRatios","colors","entries","reduce","result","key","color","white","black","indexOf","base","hex","baseHex","contrastRatio","forEach","i","direction","getButtons","customButtons","fonts","space","variants","filter","includes","keyColor","borderWidth","roundness","shine","sizes","sm","fontSize","paddingH","paddingV","xs","md","lg","getMinLineHeight","size","idealSize","floor","Math","ceil","px","abs","ratio","getShared","elevation","mode","getSizeLabelFromIndex","sizeIndex","smSizeLabels","lgSizeLabels","baseSizeLabel","getSizes","count","customSizes","lgCount","mdSize","smCount","offset","label","Error","Array","fill","map","pow"],"mappings":"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","sourcesContent":["import { getHexFromHexOrName, setColorByContrastWithHsl } from './utils/colors';\n\nexport const getInheritedBaseColor = ({\n\tattempt = 0,\n\tbaseColors,\n\tmaxAttempts: initMaxAttempts,\n\tprevUnsafeColor,\n\tresolveCssColors = true,\n\tunsafeColor,\n}) => {\n\tlet maxAttempts = initMaxAttempts;\n\n\tif (initMaxAttempts === undefined) {\n\t\tmaxAttempts = Object.keys(baseColors).length;\n\t}\n\n\tif (attempt > maxAttempts) {\n\t\treturn unsafeColor;\n\t}\n\n\tif (!baseColors[unsafeColor]) {\n\t\treturn resolveCssColors ? unsafeColor : prevUnsafeColor;\n\t}\n\n\treturn getInheritedBaseColor({\n\t\tattempt: attempt + 1,\n\t\tbaseColors,\n\t\tmaxAttempts,\n\t\tprevUnsafeColor: unsafeColor,\n\t\tresolveCssColors,\n\t\tunsafeColor: baseColors[unsafeColor],\n\t})\n}\n\nexport const getColors = ({ baseColors }) => {\n\tconst bgStep = 1.1;\n\tconst contrastRatios = [7, 4.5, 3];\n\n\tconst colors = Object.entries(baseColors).reduce((result, [key, unsafeColor]) => {\n\t\tlet color = getInheritedBaseColor({ baseColors, unsafeColor });\n\t\tcolor = getHexFromHexOrName(color);\n\t\tconst white = getHexFromHexOrName(baseColors.white);\n\t\tconst black = getHexFromHexOrName(baseColors.black);\n\n\t\tif (['white', 'black'].indexOf(key) >= 0) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// Default is a special range from white to black,\n\t\t// but with user configured options for white and black\n\t\tif (key === 'default') {\n\t\t\tcolor = black;\n\t\t}\n\n\t\tresult[key] = {};\n\n\t\tresult[key].base = color;\n\n    result[key]['light-bg'] = setColorByContrastWithHsl({\n      hex: color,\n      baseHex: white,\n      contrastRatio: bgStep,\n    });\n\n\t\tcontrastRatios.forEach((contrastRatio, i) => {\n\t\t\t// Large text\n\t    result[key][`light-${i + 1}`] = setColorByContrastWithHsl({\n\t      hex: color,\n\t      baseHex: result[key]['light-bg'],\n\t      contrastRatio,\n\t      direction: 'desc',\n\t    });\n\t\t});\n\n\t\tresult[key]['dark-bg'] = setColorByContrastWithHsl({\n      hex: color,\n      baseHex: black,\n      contrastRatio: bgStep,\n    });\n\n\t\tcontrastRatios.forEach((contrastRatio, i) => {\n\t\t\t// Large text\n\t    result[key][`dark-${i + 1}`] = setColorByContrastWithHsl({\n\t      hex: color,\n\t      baseHex: result[key]['dark-bg'],\n\t      contrastRatio: contrastRatio,\n\t      direction: 'asc',\n\t    });\n\t\t});\n\n\t\treturn result;\n\t}, {});\n\n\treturn colors;\n}\n\nexport const getButtons = ({\n\tbaseColors,\n\tcolors,\n\tcustomButtons,\n\tfonts,\n\tspace,\n}) => {\n\tconst variants = Object.keys(baseColors)\n\t\t.filter(key => !['black', 'white'].includes(key))\n\t\t.reduce((result, key) => {\n\t\t\treturn ({\n\t\t\t\t...result,\n\t\t\t\t[key]: {\n\t\t\t\t\t'default': {\n\t\t\t\t\t\tkeyColor: key\n\t\t\t\t\t},\n\t\t\t\t\t':hover': {\n\t\t\t\t\t\tkeyColor: key,\n\t\t\t\t\t},\n\t\t\t\t\t':focus': {\n\t\t\t\t\t\tkeyColor: key,\n\t\t\t\t\t},\n\t\t\t\t\t':active': {\n\t\t\t\t\t\tkeyColor: key,\n\t\t\t\t\t},\n\t\t\t\t\t':disabled': {\n\t\t\t\t\t\tkeyColor: 'neutral',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t}, {});\n\n\treturn ({\n\t\tborderWidth: 1,\n\t\troundness: 0.2,\n\t\tshine: 1, // Very shiny: glass, shiny: plastic, slightly shiny: paper, 0: flat\n\t\tsizes: {\n\t\t\tsm: {\n\t\t\t\tfontSize: fonts.sizes.sm,\n\t\t\t\tpaddingH: space.sm,\n\t\t\t\tpaddingV: space.xs,\n\t\t\t},\n\t\t\tmd: {\n\t\t\t\tfontSize: fonts.sizes.md,\n\t\t\t\tpaddingH: space.md,\n\t\t\t\tpaddingV: space.sm,\n\t\t\t},\n\t\t\tlg: {\n\t\t\t\tfontSize: fonts.sizes.lg,\n\t\t\t\tpaddingH: space.md,\n\t\t\t\tpaddingV: space.sm,\n\t\t\t},\n\t\t},\n\t\tvariants,\n\t});\n};\n\nexport const getMinLineHeight = ({ size, space }) => {\n\tconst idealSize = size * 1.4;\n\tconst floor = Math.floor(idealSize / space.xs) * space.xs;\n\tconst ceil = Math.ceil(idealSize / space.xs) * space.xs;\n\tconst px = Math.abs(idealSize - floor) <= Math.abs(idealSize - ceil) ? floor : ceil;\n\tconst ratio = px / size;\n\n\treturn {\n\t\tpx,\n\t\tratio,\n\t}\n};\n\nexport const getShared = ({ elevation = 1, roundness = 3, shine = 0 }) => ({\n\televation,\n\tmode: undefined, // 'light', 'dark', undefined\n\troundness,\n\tshine,\n});\n\nexport const getSizeLabelFromIndex = sizeIndex => {\n\tconst smSizeLabels = ['sm', 'xs'];\n\tconst lgSizeLabels = ['lg', 'xl'];\n\tconst baseSizeLabel = 'md';\n\n\tif (sizeIndex < 0) {\n\t\tif (-1 * sizeIndex <= smSizeLabels.length) {\n\t\t\treturn smSizeLabels[-1 * sizeIndex - 1];\n\t\t}\n\n\t\treturn `${-1 * sizeIndex - 1}${smSizeLabels[smSizeLabels.length - 1]}`;\n\t}\n\n\tif (sizeIndex > 0) {\n\t\tif (sizeIndex <= lgSizeLabels.length) {\n\t\t\treturn lgSizeLabels[sizeIndex - 1];\n\t\t}\n\n\t\treturn `${sizeIndex - 1}${lgSizeLabels[lgSizeLabels.length - 1]}`;\n\t}\n\n\treturn baseSizeLabel;\n}\n\nexport const getSizes = ({\n\tcount,\n\tcustomSizes = {},\n\tlgCount = 0,\n\tmdSize = null,\n\tsmCount = 0,\n}) => {\n\tlet offset;\n\n\tlet sizes = [{\n\t\tlabel: 'md',\n\t\tsize: mdSize,\n\t}];\n\n\tif (count) {\n\t\tif (count < 1) {\n\t\t\tthrow new Error('Count must be at least 1');\n\t\t}\n\n\t\toffset = Math.floor(count / 2);\n\t\tsizes = new Array(count).fill(null).map((size, i) => i - offset);\n\t} else if (lgCount >= 0 && smCount >= 0) {\n\t\toffset = smCount;\n\t\tsizes = new Array(1 + lgCount + smCount).fill(null).map((size, i) => i - offset);\n\t} else {\n\t\tthrow new Error('You must define `count` _or_ `lgCount`/`smCount`');\n\t}\n\n\tsizes = sizes.map(sizeIndex => {\n\t\tlet size = {\n\t\t\tlabel: getSizeLabelFromIndex(sizeIndex),\n\t\t\tsize: mdSize * Math.pow(2, sizeIndex),\n\t\t};\n\n\t\treturn size;\n\t});\n\n\treturn {\n\t\t...sizes.reduce((result, size) => ({\n\t\t\t...result,\n\t\t\t[size.label]: size.size,\n\t\t}), {}),\n\t\t...customSizes,\n\t};\n}\n\nexport default {\n  getSizes,\n};\n"]},"metadata":{},"sourceType":"module"}