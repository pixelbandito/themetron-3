{"ast":null,"code":"var _jsxFileName = \"/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/themed-ui/src/Accordion/Accordion.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Transition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport styles from './Accordion.module.css';\nimport Card from '../Card';\n\nconst Accordion = ({\n  children,\n  className,\n  defaultIsOpen,\n  head: customHead,\n  variant,\n  ...passedProps\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultIsOpen);\n  const [expandedHeight, setExpandedHeight] = useState();\n  const cardRef = useRef();\n  const head = customHead !== null && customHead !== void 0 ? customHead : isOpen ? 'Show less' : 'Show more';\n  useEffect(() => {\n    if (isOpen && cardRef.current) {\n      setExpandedHeight(cardRef.current.scrollHeight);\n    }\n  }, [isOpen]);\n  const transitionStyles = {\n    exiting: {\n      borderBottomWidth: 1\n    },\n    exited: {\n      borderBottomWidth: 0\n    }\n  };\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, passedProps, {\n    className: classNames(className, styles.Accordion),\n    variant: variant,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Transition, {\n    in: isOpen,\n    timeout: 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, state => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Head, {\n    variant: variant,\n    onClick: () => setIsOpen(prevIsOpen => !prevIsOpen),\n    style: { ...transitionStyles[state]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, head), /*#__PURE__*/React.createElement(Card.Body, {\n    className: styles.body,\n    ref: cardRef,\n    style: {\n      boxSizing: 'content-box',\n      maxHeight: !isOpen ? '0px' : `${expandedHeight}px`,\n      paddingBottom: !isOpen ? '0px' : undefined,\n      paddingTop: !isOpen ? '0px' : undefined\n    },\n    variant: variant,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, children))));\n};\n\nAccordion.propTypes = {\n  className: PropTypes.string,\n  defaultIsOpen: PropTypes.bool,\n  head: PropTypes.node,\n  variant: PropTypes.string\n};\nAccordion.defaultProps = {\n  className: '',\n  defaultIsOpen: false,\n  head: null,\n  variant: 'default'\n};\nconst StyledAccordion = styled(Accordion)(({\n  backgroundColor,\n  theme\n}) => {\n  return {\n    color: theme.color\n  };\n});\nexport default StyledAccordion;","map":{"version":3,"sources":["/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/themed-ui/src/Accordion/Accordion.js"],"names":["React","useEffect","useRef","useState","Transition","PropTypes","classNames","styled","styles","Card","Accordion","children","className","defaultIsOpen","head","customHead","variant","passedProps","isOpen","setIsOpen","expandedHeight","setExpandedHeight","cardRef","current","scrollHeight","transitionStyles","exiting","borderBottomWidth","exited","state","prevIsOpen","body","boxSizing","maxHeight","paddingBottom","undefined","paddingTop","propTypes","string","bool","node","defaultProps","StyledAccordion","backgroundColor","theme","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,QADiB;AAEjBC,EAAAA,SAFiB;AAGjBC,EAAAA,aAHiB;AAIjBC,EAAAA,IAAI,EAAEC,UAJW;AAKjBC,EAAAA,OALiB;AAMjB,KAAGC;AANc,CAAD,KAOZ;AACJ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAACU,aAAD,CAApC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,EAApD;AACA,QAAMmB,OAAO,GAAGpB,MAAM,EAAtB;AACA,QAAMY,IAAI,GAAGC,UAAH,aAAGA,UAAH,cAAGA,UAAH,GAAkBG,MAAM,GAAG,WAAH,GAAiB,WAAnD;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,MAAM,IAAII,OAAO,CAACC,OAAtB,EAA+B;AAC7BF,MAAAA,iBAAiB,CAACC,OAAO,CAACC,OAAR,CAAgBC,YAAjB,CAAjB;AACD;AACF,GAJQ,EAIN,CAACN,MAAD,CAJM,CAAT;AAMA,QAAMO,gBAAgB,GAAG;AACvBC,IAAAA,OAAO,EAAG;AAAEC,MAAAA,iBAAiB,EAAE;AAArB,KADa;AAEvBC,IAAAA,MAAM,EAAG;AAAED,MAAAA,iBAAiB,EAAE;AAArB;AAFc,GAAzB;AAKA,sBACE,oBAAC,IAAD,oBACMV,WADN;AAEE,IAAA,SAAS,EAAEX,UAAU,CAACM,SAAD,EAAYJ,MAAM,CAACE,SAAnB,CAFvB;AAGE,IAAA,OAAO,EAAEM,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKE,oBAAC,UAAD;AACE,IAAA,EAAE,EAAEE,MADN;AAEE,IAAA,OAAO,EAAE,GAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGW,KAAK,iBACJ,uDACE,oBAAC,IAAD,CAAM,IAAN;AACE,IAAA,OAAO,EAAEb,OADX;AAEE,IAAA,OAAO,EAAE,MAAMG,SAAS,CAACW,UAAU,IAAI,CAACA,UAAhB,CAF1B;AAGE,IAAA,KAAK,EAAE,EACL,GAAGL,gBAAgB,CAACI,KAAD;AADd,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGf,IAPH,CADF,eAUE,oBAAC,IAAD,CAAM,IAAN;AACE,IAAA,SAAS,EAAEN,MAAM,CAACuB,IADpB;AAEE,IAAA,GAAG,EAAET,OAFP;AAGE,IAAA,KAAK,EAAE;AACLU,MAAAA,SAAS,EAAE,aADN;AAELC,MAAAA,SAAS,EAAE,CAACf,MAAD,GAAU,KAAV,GAAmB,GAAEE,cAAe,IAF1C;AAGLc,MAAAA,aAAa,EAAE,CAAChB,MAAD,GAAU,KAAV,GAAkBiB,SAH5B;AAILC,MAAAA,UAAU,EAAE,CAAClB,MAAD,GAAU,KAAV,GAAkBiB;AAJzB,KAHT;AASE,IAAA,OAAO,EAAEnB,OATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGL,QAXH,CAVF,CALJ,CALF,CADF;AAuCD,CA/DD;;AAiEAD,SAAS,CAAC2B,SAAV,GAAsB;AACpBzB,EAAAA,SAAS,EAAEP,SAAS,CAACiC,MADD;AAEpBzB,EAAAA,aAAa,EAAER,SAAS,CAACkC,IAFL;AAGpBzB,EAAAA,IAAI,EAAET,SAAS,CAACmC,IAHI;AAIpBxB,EAAAA,OAAO,EAAEX,SAAS,CAACiC;AAJC,CAAtB;AAOA5B,SAAS,CAAC+B,YAAV,GAAyB;AACvB7B,EAAAA,SAAS,EAAE,EADY;AAEvBC,EAAAA,aAAa,EAAE,KAFQ;AAGvBC,EAAAA,IAAI,EAAE,IAHiB;AAIvBE,EAAAA,OAAO,EAAE;AAJc,CAAzB;AAOA,MAAM0B,eAAe,GAAGnC,MAAM,CAACG,SAAD,CAAN,CACtB,CAAC;AACCiC,EAAAA,eADD;AAECC,EAAAA;AAFD,CAAD,KAGM;AACJ,SAAO;AACLC,IAAAA,KAAK,EAAED,KAAK,CAACC;AADR,GAAP;AAGD,CARqB,CAAxB;AAWA,eAAeH,eAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Transition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport styles from './Accordion.module.css';\nimport Card from '../Card';\n\nconst Accordion = ({\n  children,\n  className,\n  defaultIsOpen,\n  head: customHead,\n  variant,\n  ...passedProps\n}) => {\n  const [isOpen, setIsOpen] = useState(defaultIsOpen);\n  const [expandedHeight, setExpandedHeight] = useState();\n  const cardRef = useRef();\n  const head = customHead ?? (isOpen ? 'Show less' : 'Show more');\n\n  useEffect(() => {\n    if (isOpen && cardRef.current) {\n      setExpandedHeight(cardRef.current.scrollHeight);\n    }\n  }, [isOpen]);\n\n  const transitionStyles = {\n    exiting:  { borderBottomWidth: 1 },\n    exited:  { borderBottomWidth: 0 },\n  };\n\n  return (\n    <Card\n      {...passedProps}\n      className={classNames(className, styles.Accordion)}\n      variant={variant}\n    >\n      <Transition\n        in={isOpen}\n        timeout={200}\n      >\n        {state => (\n          <>\n            <Card.Head\n              variant={variant}\n              onClick={() => setIsOpen(prevIsOpen => !prevIsOpen)}\n              style={{\n                ...transitionStyles[state],\n              }}\n            >\n              {head}\n            </Card.Head>\n            <Card.Body\n              className={styles.body}\n              ref={cardRef}\n              style={{\n                boxSizing: 'content-box',\n                maxHeight: !isOpen ? '0px' : `${expandedHeight}px`,\n                paddingBottom: !isOpen ? '0px' : undefined,\n                paddingTop: !isOpen ? '0px' : undefined,\n              }}\n              variant={variant}\n            >\n              {children}\n            </Card.Body>\n          </>\n        )}\n      </Transition>\n    </Card>\n  )\n};\n\nAccordion.propTypes = {\n  className: PropTypes.string,\n  defaultIsOpen: PropTypes.bool,\n  head: PropTypes.node,\n  variant: PropTypes.string,\n};\n\nAccordion.defaultProps = {\n  className: '',\n  defaultIsOpen: false,\n  head: null,\n  variant: 'default',\n};\n\nconst StyledAccordion = styled(Accordion)(\n  ({\n    backgroundColor,\n    theme,\n  }) => {\n    return {\n      color: theme.color,\n    };\n  }\n);\n\nexport default StyledAccordion;\n"]},"metadata":{},"sourceType":"module"}