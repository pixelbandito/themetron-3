{"ast":null,"code":"import colorConvert from 'color-convert';\nexport const getContrastRatio = ({\n  hexA,\n  hexB,\n  luminanceA,\n  luminanceB\n}) => {\n  luminanceA = luminanceA || luminanceA === 0 ? luminanceA : getLuminance(hexA);\n  luminanceB = luminanceB || luminanceB === 0 ? luminanceB : getLuminance(hexB);\n  const [darker, lighter] = [luminanceA, luminanceB].sort();\n  const contrastRatio = ((lighter + 0.05) / (darker + 0.05)).toFixed(2);\n  return contrastRatio;\n};\nexport const getNextLuminanceByContrastRatio = ({\n  luminance,\n  contrastRatio\n}) => luminance * contrastRatio + contrastRatio / 20 - 1 / 20;\nexport const getPrevLuminanceByContrastRatio = ({\n  luminance,\n  contrastRatio\n}) => (luminance + 1 / 20) / contrastRatio - 1 / 20;\nexport const getLuminance = hex => {\n  const rgb = colorConvert.hex.rgb(hex);\n  let rgb2 = rgb.map((channel, i) => {\n    let c = channel / 255;\n\n    if (c <= 0.03928) {\n      return c / 12.92;\n    } else {\n      return Math.pow((c + 0.055) / 1.055, 2.4);\n    }\n  });\n  const luminance = 0.2126 * rgb2[0] + 0.7152 * rgb2[1] + 0.0722 * rgb2[2];\n  return luminance;\n};\nexport const setColorByLuminanceWithHsl = ({\n  attempt = 0,\n  hex,\n  initHsl,\n  luminance: targetLuminance,\n  maxAttempts = 10\n}) => {\n  const luminance = getLuminance(hex);\n\n  if (luminance === targetLuminance || attempt >= maxAttempts) {\n    return hex;\n  }\n\n  const darken = luminance > targetLuminance;\n  const jumpSize = (darken ? -100 : 100) / Math.pow(2, attempt + 1);\n  let prevHsl = colorConvert.hex.hsl(hex);\n  let safeInitHsl = initHsl !== undefined ? initHsl : prevHsl;\n  const hsl = setHsl({\n    hsl: safeInitHsl,\n    l: Math.max(0, Math.min(prevHsl[2] + jumpSize, 100))\n  });\n\n  if (`#${colorConvert.hsl.hex(hsl)}` === hex) {\n    return hex;\n  }\n\n  return setColorByLuminanceWithHsl({\n    attempt: attempt + 1,\n    hex: `#${colorConvert.hsl.hex(hsl)}`,\n    initHsl: safeInitHsl,\n    luminance: targetLuminance,\n    maxAttempts\n  });\n};\nexport const setColorByContrastWithHsl = ({\n  attempt = 0,\n  baseHex,\n  contrastRatio: targetContrastRatio,\n  originalContrastRatio,\n  direction,\n  hex,\n  maxAttempts = 10\n}) => {\n  let targetLuminance;\n  originalContrastRatio = originalContrastRatio || targetContrastRatio;\n\n  if (!direction) {\n    targetLuminance = getLuminance(baseHex) > 0.5 ? getPrevLuminanceByContrastRatio({\n      contrastRatio: targetContrastRatio,\n      luminance: getLuminance(baseHex)\n    }) : getNextLuminanceByContrastRatio({\n      contrastRatio: targetContrastRatio,\n      luminance: getLuminance(baseHex)\n    });\n  } else if (direction === 'asc') {\n    targetLuminance = getNextLuminanceByContrastRatio({\n      contrastRatio: targetContrastRatio,\n      luminance: getLuminance(baseHex)\n    });\n  } else if (direction === 'desc') {\n    targetLuminance = getPrevLuminanceByContrastRatio({\n      contrastRatio: targetContrastRatio,\n      luminance: getLuminance(baseHex)\n    });\n  }\n\n  const nextColor = setColorByLuminanceWithHsl({\n    hex,\n    luminance: targetLuminance,\n    maxAttempts\n  });\n\n  if (getContrastRatio({\n    hexA: nextColor,\n    hexB: baseHex\n  }) >= originalContrastRatio || attempt > maxAttempts) {\n    return nextColor;\n  }\n\n  return setColorByContrastWithHsl({\n    attempt: attempt + 1,\n    baseHex,\n    contrastRatio: targetContrastRatio + 0.05,\n    originalContrastRatio,\n    direction,\n    hex,\n    maxAttempts\n  });\n};\nexport const setHsl = ({\n  hsl: [h, s, l],\n  h: h2,\n  s: s2,\n  l: l2\n}) => [typeof h2 === 'number' ? h2 : h, typeof s2 === 'number' ? s2 : s, typeof l2 === 'number' ? l2 : l];\nexport const getHexFromHexOrName = color => {\n  let safeValue;\n\n  try {\n    safeValue = colorConvert.keyword.hex(color).toLowerCase();\n  } catch (e) {\n    safeValue = color[0] === '#' ? color.substr(1) : color;\n  }\n\n  return `#${safeValue}` || '#000000';\n};\nwindow.pxbColors = {\n  colorConvert,\n  getContrastRatio,\n  getHexFromHexOrName,\n  getLuminance,\n  setColorByContrastWithHsl,\n  setHsl\n};\nexport default {\n  getContrastRatio,\n  getHexFromHexOrName,\n  getLuminance,\n  setColorByContrastWithHsl,\n  setHsl\n};","map":{"version":3,"sources":["/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/theme-editor/src/utils/colors.js"],"names":["colorConvert","getContrastRatio","hexA","hexB","luminanceA","luminanceB","getLuminance","darker","lighter","sort","contrastRatio","toFixed","getNextLuminanceByContrastRatio","luminance","getPrevLuminanceByContrastRatio","hex","rgb","rgb2","map","channel","i","c","Math","pow","setColorByLuminanceWithHsl","attempt","initHsl","targetLuminance","maxAttempts","darken","jumpSize","prevHsl","hsl","safeInitHsl","undefined","setHsl","l","max","min","setColorByContrastWithHsl","baseHex","targetContrastRatio","originalContrastRatio","direction","nextColor","h","s","h2","s2","l2","getHexFromHexOrName","color","safeValue","keyword","toLowerCase","e","substr","window","pxbColors"],"mappings":"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","sourcesContent":["import colorConvert from 'color-convert';\n\nexport const getContrastRatio = ({ hexA, hexB, luminanceA, luminanceB }) => {\n  luminanceA = luminanceA || luminanceA === 0 ? luminanceA : getLuminance(hexA);\n  luminanceB = luminanceB || luminanceB === 0 ? luminanceB : getLuminance(hexB);\n  const [darker, lighter] = [luminanceA, luminanceB].sort();\n  const contrastRatio = ((lighter + 0.05) / (darker + 0.05)).toFixed(2);\n  return contrastRatio;\n};\n\nexport const getNextLuminanceByContrastRatio = ({ luminance, contrastRatio }) =>\n  luminance * contrastRatio + contrastRatio / 20 - 1 / 20;\n\nexport const getPrevLuminanceByContrastRatio = ({ luminance, contrastRatio }) =>\n  (luminance + 1 / 20) / contrastRatio - 1 / 20;\n\nexport const getLuminance = hex => {\n  const rgb = colorConvert.hex.rgb(hex);\n\n  let rgb2 = rgb.map((channel, i) => {\n    let c = channel / 255;\n\n    if (c <= 0.03928) {\n      return c / 12.92;\n    } else {\n      return Math.pow((c + 0.055) / 1.055, 2.4);\n    }\n  });\n\n  const luminance = (0.2126 * rgb2[0] + 0.7152 * rgb2[1] + 0.0722 * rgb2[2]);\n  return luminance;\n};\n\nexport const setColorByLuminanceWithHsl = ({\n  attempt = 0,\n  hex,\n  initHsl,\n  luminance: targetLuminance,\n  maxAttempts = 10,\n}) => {\n  const luminance = getLuminance(hex);\n\n  if (luminance === targetLuminance || attempt >= maxAttempts) {\n    return hex;\n  }\n\n  const darken = luminance > targetLuminance;\n  const jumpSize = (darken ? -100 : 100) / Math.pow(2, attempt + 1);\n  let prevHsl = colorConvert.hex.hsl(hex);\n  let safeInitHsl = initHsl !== undefined ? initHsl : prevHsl;\n\n  const hsl = setHsl({\n    hsl: safeInitHsl,\n    l: Math.max(0, Math.min(prevHsl[2] + jumpSize, 100)),\n  });\n\n  if (`#${colorConvert.hsl.hex(hsl)}` === hex) {\n    return hex;\n  }\n\n  return setColorByLuminanceWithHsl({\n    attempt: attempt + 1,\n    hex: `#${colorConvert.hsl.hex(hsl)}`,\n    initHsl: safeInitHsl,\n    luminance: targetLuminance,\n    maxAttempts,\n  });\n};\n\nexport const setColorByContrastWithHsl = ({\n  attempt = 0,\n  baseHex,\n  contrastRatio: targetContrastRatio,\n  originalContrastRatio,\n  direction,\n  hex,\n  maxAttempts = 10,\n}) => {\n  let targetLuminance;\n  originalContrastRatio = originalContrastRatio || targetContrastRatio;\n\n  if (!direction) {\n    targetLuminance = getLuminance(baseHex) > 0.5 ?\n      getPrevLuminanceByContrastRatio({\n        contrastRatio: targetContrastRatio,\n        luminance: getLuminance(baseHex),\n      }) :\n      getNextLuminanceByContrastRatio({\n        contrastRatio: targetContrastRatio,\n        luminance: getLuminance(baseHex),\n      });\n  } else if (direction === 'asc') {\n    targetLuminance = getNextLuminanceByContrastRatio({\n      contrastRatio: targetContrastRatio,\n      luminance: getLuminance(baseHex),\n    });\n  } else if (direction === 'desc') {\n    targetLuminance = getPrevLuminanceByContrastRatio({\n      contrastRatio: targetContrastRatio,\n      luminance: getLuminance(baseHex),\n    })\n  }\n\n  const nextColor = setColorByLuminanceWithHsl({\n    hex,\n    luminance: targetLuminance,\n    maxAttempts,\n  });\n\n  if (getContrastRatio({ hexA: nextColor, hexB: baseHex }) >= originalContrastRatio || attempt > maxAttempts) {\n    return nextColor;\n  }\n\n  return setColorByContrastWithHsl({\n    attempt: attempt + 1,\n    baseHex,\n    contrastRatio: targetContrastRatio + 0.05,\n    originalContrastRatio,\n    direction,\n    hex,\n    maxAttempts,\n  });\n};\n\nexport const setHsl = ({ hsl: [h, s, l], h: h2, s: s2, l: l2 }) => ([\n  typeof h2 === 'number' ? h2 : h,\n  typeof s2 === 'number' ? s2 : s,\n  typeof l2 === 'number' ? l2 : l,\n]);\n\nexport const getHexFromHexOrName = color => {\n  let safeValue;\n\n  try {\n    safeValue = colorConvert.keyword.hex(color).toLowerCase();\n  } catch(e) {\n    safeValue = color[0] === '#' ? color.substr(1) : color;\n  }\n\n  return `#${safeValue}` || '#000000';\n}\n\nwindow.pxbColors = {\n  colorConvert,\n  getContrastRatio,\n  getHexFromHexOrName,\n  getLuminance,\n  setColorByContrastWithHsl,\n  setHsl,\n};\n\nexport default {\n  getContrastRatio,\n  getHexFromHexOrName,\n  getLuminance,\n  setColorByContrastWithHsl,\n  setHsl,\n};\n"]},"metadata":{},"sourceType":"module"}