{"ast":null,"code":"var _jsxFileName = \"/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/theme-editor/src/Font/Font.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport { margin } from 'styled-system';\nimport { getModeStyles } from '../component-utils';\nimport { getMinLineHeight } from '../theme-utils';\nimport { tagPropType } from '../prop-types';\nimport styles from './Font.module.css';\nexport const getFontStyle = ({\n  color = 'default',\n  contrast = '2',\n  family = 'sansSerif',\n  size = 'md',\n  weight = 'normal',\n  theme\n}) => {\n  var _theme$shared;\n\n  const {\n    ratio: lineHeightRatio\n  } = getMinLineHeight({\n    size: theme.fonts.sizes[size],\n    space: { ...theme.space,\n      xs: theme.space.sm\n    }\n  });\n  const darkModeStyle = {\n    color: theme.colors[color][`dark-${contrast}`]\n  };\n  const lightModeStyle = {\n    color: theme.colors[color][`light-${contrast}`]\n  };\n  return {\n    fontFamily: theme.fonts[family],\n    fontSize: theme.fonts.sizes[size],\n    fontWeight: theme.fonts.weights[weight],\n    lineHeight: lineHeightRatio,\n    ...getModeStyles({\n      darkModeStyle,\n      lightModeStyle,\n      mode: theme === null || theme === void 0 ? void 0 : (_theme$shared = theme.shared) === null || _theme$shared === void 0 ? void 0 : _theme$shared.mode\n    })\n  };\n};\n\nconst Font = ({\n  className,\n  tag: CustomTag,\n  ...passedProps\n}) => /*#__PURE__*/React.createElement(CustomTag, Object.assign({}, passedProps, {\n  className: classNames(className, styles.Font),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }\n}));\n\nFont.propTypes = {\n  className: PropTypes.string,\n  tag: tagPropType\n};\nFont.defaultProps = {\n  className: '',\n  tag: 'div'\n};\nconst StyledFont = styled(Font)(props => getFontStyle(props), margin);\nexport const P = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  className: styles.P,\n  tag: \"p\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }\n}));\nexport const Small = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  size: \"sm\",\n  tag: \"small\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }\n}));\nexport const Strong = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  tag: \"strong\",\n  weight: \"bold\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 3\n  }\n}));\nexport const Em = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  tag: \"em\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 3\n  }\n}));\nexport const U = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  tag: \"u\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }\n}));\nexport const I = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  tag: \"i\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }\n}));\nexport const B = props => /*#__PURE__*/React.createElement(StyledFont, Object.assign({\n  tag: \"b\",\n  weight: \"bold\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 3\n  }\n}));\nexport default StyledFont;","map":{"version":3,"sources":["/Users/pixelbandito/Code/pixelbandito/themetron-3/workspaces/theme-editor/src/Font/Font.js"],"names":["React","PropTypes","classNames","styled","margin","getModeStyles","getMinLineHeight","tagPropType","styles","getFontStyle","color","contrast","family","size","weight","theme","ratio","lineHeightRatio","fonts","sizes","space","xs","sm","darkModeStyle","colors","lightModeStyle","fontFamily","fontSize","fontWeight","weights","lineHeight","mode","shared","Font","className","tag","CustomTag","passedProps","propTypes","string","defaultProps","StyledFont","props","P","Small","Strong","Em","U","I","B"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport { margin } from 'styled-system';\n\nimport { getModeStyles } from '../component-utils';\nimport { getMinLineHeight } from '../theme-utils';\nimport { tagPropType } from '../prop-types';\nimport styles from './Font.module.css';\n\nexport const getFontStyle = ({\n  color = 'default',\n  contrast = '2',\n  family = 'sansSerif',\n  size = 'md',\n  weight = 'normal',\n  theme,\n}) => {\n  const {\n    ratio: lineHeightRatio,\n  } = getMinLineHeight({\n    size: theme.fonts.sizes[size],\n    space: {\n      ...theme.space,\n      xs: theme.space.sm,\n    },\n  });\n\n  const darkModeStyle = { color: theme.colors[color][`dark-${contrast}`] };\n  const lightModeStyle = { color: theme.colors[color][`light-${contrast}`] };\n\n  return ({\n    fontFamily: theme.fonts[family],\n    fontSize: theme.fonts.sizes[size],\n    fontWeight: theme.fonts.weights[weight],\n    lineHeight: lineHeightRatio,\n    ...getModeStyles({\n      darkModeStyle,\n      lightModeStyle,\n      mode: theme?.shared?.mode,\n    }),\n  })\n};\n\nconst Font = ({\n  className,\n  tag: CustomTag,\n  ...passedProps\n}) => (\n  <CustomTag\n    {...passedProps}\n    className={classNames(className, styles.Font)}\n  />\n);\n\nFont.propTypes = {\n  className: PropTypes.string,\n  tag: tagPropType,\n};\n\nFont.defaultProps = {\n  className: '',\n  tag: 'div',\n};\n\nconst StyledFont = styled(Font)(\n  props => getFontStyle(props),\n  margin,\n);\n\nexport const P = props => (\n  <StyledFont\n    className={styles.P}\n    tag=\"p\"\n    {...props}\n  />\n);\n\nexport const Small = props => (\n  <StyledFont\n    size=\"sm\"\n    tag=\"small\"\n    {...props}\n  />\n);\n\nexport const Strong = props => (\n  <StyledFont\n    tag=\"strong\"\n    weight=\"bold\"\n    {...props}\n  />\n);\n\nexport const Em = props => (\n  <StyledFont\n    tag=\"em\"\n    {...props}\n  />\n);\n\nexport const U = props => (\n  <StyledFont\n    tag=\"u\"\n    {...props}\n  />\n);\n\nexport const I = props => (\n  <StyledFont\n    tag=\"i\"\n    {...props}\n  />\n);\n\nexport const B = props => (\n  <StyledFont\n    tag=\"b\"\n    weight=\"bold\"\n    {...props}\n  />\n);\n\nexport default StyledFont;\n"]},"metadata":{},"sourceType":"module"}